{"remainingRequest":"/home/calculus/dev/m/pharma-frontend/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/calculus/dev/m/pharma-frontend/src/components/Widgets/WidgetGlobe.vue?vue&type=template&id=19f20809","dependencies":[{"path":"/home/calculus/dev/m/pharma-frontend/src/components/Widgets/WidgetGlobe.vue","mtime":1652296673166},{"path":"/home/calculus/dev/m/pharma-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/calculus/dev/m/pharma-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/calculus/dev/m/pharma-frontend/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/home/calculus/dev/m/pharma-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/calculus/dev/m/pharma-frontend/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoJPCEtLSBHbG9iZSB3aWRnZXQgLS0+DQoJPGRpdiByZWY9Imdsb2JlQ29udGFpbmVyIiBjbGFzcz0iZ2xvYmVDb250YWluZXIiPg0KCQk8Y2FudmFzIHJlZj0iZ2xvYmUiIHdpZHRoPSI3MDAiIGhlaWdodD0iNjU1IiBjbGFzcz0iIj48L2NhbnZhcz4NCgk8L2Rpdj4NCgk8IS0tIEdsb2JlIHdpZGdldCAtLT4NCg=="},{"version":3,"sources":["/home/calculus/dev/m/pharma-frontend/src/components/Widgets/WidgetGlobe.vue"],"names":[],"mappings":";CACC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;CACpfile":"/home/calculus/dev/m/pharma-frontend/src/components/Widgets/WidgetGlobe.vue","sourceRoot":"","sourcesContent":["<template>\r\n\t<!-- Globe widget -->\r\n\t<div ref=\"globeContainer\" class=\"globeContainer\">\r\n\t\t<canvas ref=\"globe\" width=\"700\" height=\"655\" class=\"\"></canvas>\r\n\t</div>\r\n\t<!-- Globe widget -->\r\n</template>\r\n\r\n<script>\r\n\r\n\tvar THREE = require('../../plugins/three/threejs.js');\r\n\trequire('../../plugins/three/orbit-controls.js');\r\n\r\n\texport default ({\r\n\t\tdata(){\r\n\t\t\treturn {\r\n\t\t\t} ;\r\n\t\t},\r\n\t\tmounted () {\r\n\t\t\tlet container = this.$refs.globeContainer ;\r\n\t\t\tlet canvas = this.$refs.globe ;\r\n\r\n\t\t\tconst globeRadius = 100;\r\n\t\t\tconst globeWidth = 4098 / 2;\r\n\t\t\tconst globeHeight = 1968 / 2;\r\n\r\n\t\t\tfunction convertFlatCoordsToSphereCoords(x, y) {\r\n\t\t\t\tlet latitude = ((x - globeWidth) / globeWidth) * -180;\r\n\t\t\t\tlet longitude = ((y - globeHeight) / globeHeight) * -90;\r\n\t\t\t\tlatitude = (latitude * Math.PI) / 180;\r\n\t\t\t\tlongitude = (longitude * Math.PI) / 180;\r\n\t\t\t\tconst radius = Math.cos(longitude) * globeRadius;\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tx: Math.cos(latitude) * radius,\r\n\t\t\t\t\ty: Math.sin(longitude) * globeRadius,\r\n\t\t\t\t\tz: Math.sin(latitude) * radius\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tfunction makeMagic(points) {\r\n\t\t\t\tconst {\r\n\t\t\t\t\twidth,\r\n\t\t\t\t\theight\r\n\t\t\t\t} = container.getBoundingClientRect();\r\n\r\n\t\t\t\t// 1. Setup scene\r\n\t\t\t\tconst scene = new THREE.Scene();\r\n\t\t\t\t// 2. Setup camera\r\n\t\t\t\tconst camera = new THREE.PerspectiveCamera(45, width / height);\r\n\t\t\t\t// 3. Setup renderer\r\n\t\t\t\tconst renderer = new THREE.WebGLRenderer({\r\n\t\t\t\t\tcanvas,\r\n\t\t\t\t\tantialias: true\r\n\t\t\t\t});\r\n\t\t\t\trenderer.setSize(width, height);\r\n\t\t\t\t// 4. Add points to canvas\r\n\t\t\t\t// - Single geometry to contain all points.\r\n\t\t\t\tconst mergedGeometry = new THREE.Geometry();\r\n\t\t\t\t// - Material that the dots will be made of.\r\n\t\t\t\tconst pointGeometry = new THREE.SphereGeometry(0.5, 1, 1);\r\n\t\t\t\tconst pointMaterial = new THREE.MeshBasicMaterial({\r\n\t\t\t\t\tcolor: \"#989db5\",\r\n\t\t\t\t});\r\n\r\n\t\t\t\tfor (let point of points) {\r\n\t\t\t\t\tconst {\r\n\t\t\t\t\t\tx,\r\n\t\t\t\t\t\ty,\r\n\t\t\t\t\t\tz\r\n\t\t\t\t\t} = convertFlatCoordsToSphereCoords(\r\n\t\t\t\t\t\tpoint.x,\r\n\t\t\t\t\t\tpoint.y,\r\n\t\t\t\t\t\twidth,\r\n\t\t\t\t\t\theight\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tif (x && y && z) {\r\n\t\t\t\t\t\tpointGeometry.translate(x, y, z);\r\n\t\t\t\t\t\tmergedGeometry.merge(pointGeometry);\r\n\t\t\t\t\t\tpointGeometry.translate(-x, -y, -z);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst globeShape = new THREE.Mesh(mergedGeometry, pointMaterial);\r\n\t\t\t\tscene.add(globeShape);\r\n\r\n\t\t\t\tcontainer.classList.add(\"peekaboo\");\r\n\r\n\t\t\t\t// Setup orbital controls\r\n\t\t\t\tcamera.orbitControls = new THREE.OrbitControls(camera, canvas);\r\n\t\t\t\tcamera.orbitControls.enableKeys = false;\r\n\t\t\t\tcamera.orbitControls.enablePan = false;\r\n\t\t\t\tcamera.orbitControls.enableZoom = false;\r\n\t\t\t\tcamera.orbitControls.enableDamping = false;\r\n\t\t\t\tcamera.orbitControls.enableRotate = true;\r\n\t\t\t\tcamera.orbitControls.autoRotate = true;\r\n\t\t\t\tcamera.position.z = -265;\r\n\r\n\t\t\t\tfunction animate() {\r\n\t\t\t\t// orbitControls.autoRotate is enabled so orbitControls.update\r\n\t\t\t\t// must be called inside animation loop.\r\n\t\t\t\tcamera.orbitControls.update();\r\n\t\t\t\t\trequestAnimationFrame(animate);\r\n\t\t\t\t\trenderer.render(scene, camera);\r\n\t\t\t\t}\r\n\t\t\t\tanimate();\r\n\t\t\t}\r\n\r\n\t\t\tfunction hasWebGL() {\r\n\t\t\t\tconst gl =\r\n\t\t\t\tcanvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\r\n\t\t\t\tif (gl && gl instanceof WebGLRenderingContext) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfunction init() {\r\n\t\t\t\tif (hasWebGL()) {\r\n\t\t\t\t\twindow\r\n\t\t\t\t\twindow.fetch(\"https://raw.githubusercontent.com/creativetimofficial/public-assets/master/soft-ui-dashboard-pro/assets/js/points.json\")\r\n\t\t\t\t\t\t.then(response => response.json())\r\n\t\t\t\t\t\t.then(data => {\r\n\t\t\t\t\t\t\tmakeMagic(data.points);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tinit();\r\n\t\t},\r\n\t})\r\n\r\n</script>"]}]}